#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Aug 18 14:15:47 2017

@author: mlague

Sensitivities datm/dlnd and dlnd/datm (and r2) for global perturbation simulations
of albedo, roughness, and evaporative resistance (lid resistance; do total 
effective resistance elsewhere), for annual mean and seasonal. 

Or thats the goal, anyhow.

"""

#%%

# netcdf/numpy/xarray
import numpy as np
import netCDF4 as nc
import numpy.matlib
import datetime
import xarray as xr
from scipy import interpolate
from numpy import ma
from scipy import stats
import scipy.io as sio
#import cpickle as pickle
import pickle as pickle
from sklearn import linear_model

import time

# Plotting
import matplotlib as mpl
import matplotlib.pyplot as plt
from mpl_toolkits.basemap import Basemap, cm
import brewer2mpl as cbrew

# OS interaction
import os
import sys

from IPython.display import display
from IPython.display import HTML
import IPython.core.display as di # Example: di.display_html('<h3>%s:</h3>' % str, raw=True)

from mml_mapping_fun import mml_map
from custom_python_mml_cmap import make_colormap, mml_cmap

# Avoid having to restart the kernle if I modify my mapping scripts (or anything else)
import imp
#imp.reload(mml_map)
#imp.reload(mml_map_NA)
#imp.reload(mml_neon_box)
import matplotlib.colors as mcolors

#%%
"""
Initial Setup:
    Load data paths, set figure paths, get some required function calls to 
    custom colour bars out of the way...
"""

# Load my colour bar
cm_dlnd = mml_cmap('wrbw')
cm_datm = mml_cmap('bwr')
#cm_datm = mml_cmap('rwb')   # appears to use it backwards... heh...

# Path to save figures:
figpath = '/home/disk/eos3/mlague/simple_land/scripts/python/analysis/global_pert/figures/'

# Point at the data sets
ext_dir = '/home/disk/eos3/mlague/simple_land/output/global_pert/'

# Coupled simulations:
sims = ['global_a2_cv2_hc1_rs100',
       'global_a1_cv2_hc1_rs100','global_a3_cv2_hc1_rs100',
       'global_a2_cv2_hc0.5_rs100','global_a2_cv2_hc2_rs100',
       'global_a2_cv2_hc1_rs30','global_a2_cv2_hc1_rs200']

# load the file paths and # Open the coupled data sets in xarray
cam_files = {}
clm_files = {}
ds_cam = {}
ds_clm = {}

for run in sims:
    #print ( ext_dir + run + '/means/' + run + '.cam.h0.05-end_year_avg.nc' )
    cam_files[run] = ext_dir + run + '/means/' + run + '.cam.h0.20-50_year_avg.nc'
    clm_files[run] = ext_dir + run + '/means/' + run + '.clm2.h0.20-50_year_avg.nc'
    
    ds_cam[run] = xr.open_dataset(cam_files[run])
    ds_clm[run] = xr.open_dataset(clm_files[run])

# open a cam area file produced in matlab using an EarthEllipsoid from a cam5 f19 lat/lon data set
area_f19_mat = sio.loadmat('/home/disk/eos3/mlague/simple_land/scripts/python/analysis//f19_area.mat')
area_f19 = area_f19_mat['AreaGrid']


# ### Load some standard variables
# lat, lon, landmask

ds = ds_clm['global_a2_cv2_hc1_rs100']
lat = ds['lat'].values
lon = ds['lon'].values
landmask = ds['landmask'].values

LN,LT = np.meshgrid(lon,lat)

#print(np.shape(LN))
#print(np.shape(landmask))


#%%

# Define data sets and subtitles
ds0 = ds_cam['global_a2_cv2_hc0.5_rs100']

# perturbatinos
ds1 = ds_cam['global_a2_cv2_hc1_rs100']
ds2 = ds_cam['global_a2_cv2_hc2_rs100']

# land files
dsl0 = ds_clm['global_a2_cv2_hc0.5_rs100']
dsl1 = ds_clm['global_a2_cv2_hc1_rs100']
dsl2 = ds_clm['global_a2_cv2_hc2_rs100']


#%%  Get masks:

ds = ds_clm['global_a2_cv2_hc1_rs100']
lat = ds['lat'].values
lon = ds['lon'].values
landmask = ds['landmask'].values
landmask_nan = np.where(landmask==1,landmask,np.nan)
ocnmask_nan = landmask_nan.copy
ocnmask_nan = np.where(landmask==1,np.nan,1)

LN,LT = np.meshgrid(lon,lat)

# Get a glacier mask, too!
temp = np.mean(ds.mean('time')['MML_cv'].values[:],0)
print(np.shape(temp))
#plt.imshow(temp)
#plt.colorbar()
temp2 = temp.copy()
is_glc = np.where(temp2>1950000,np.nan,1)*landmask_nan
no_glc = np.where(temp2>1950000,1,np.nan)


ocn_glc_mask = ocnmask_nan.copy()
ocn_glc_mask = np.where(np.isnan(is_glc)==False,1,ocn_glc_mask)

bareground_mask = ocn_glc_mask.copy()
bareground_mask = np.where(np.isnan(ocn_glc_mask),1,np.nan)

######


#plt.imshow(bareground_mask)
#plt.colorbar()


#%% 

#%% 

#%% Example line-plot of sensitivity (single point... do later, from actual slope analysis I do on full map below)




#%%


#------------------------------------
# setup some empty dictionaries:
atm_var = {}
prop = {}
units = {}
prop = {}
pert = {}
# annual mean:
atm_resp = {}
# seasonal:
atm_resp_djf = {}
atm_resp_mam = {}
atm_resp_jja = {}
atm_resp_son = {}
# data sets
# atm
ds_low = {}
ds_med = {}
ds_high = {}
# lnd
dsl_low = {}
dsl_med = {}
dsl_high = {}

#------------------------------------
# fill in data sets

# albedo:
ds_low['alb'] = ds_cam['global_a1_cv2_hc1_rs100']
ds_med['alb'] = ds_cam['global_a2_cv2_hc1_rs100']
ds_high['alb'] = ds_cam['global_a3_cv2_hc1_rs100']

dsl_low['alb'] = ds_clm['global_a1_cv2_hc1_rs100']
dsl_med['alb'] = ds_clm['global_a2_cv2_hc1_rs100']
dsl_high['alb'] = ds_clm['global_a3_cv2_hc1_rs100']

# roughness:
ds_low['hc'] = ds_cam['global_a2_cv2_hc0.5_rs100']
ds_med['hc'] = ds_cam['global_a2_cv2_hc1_rs100']
ds_high['hc'] = ds_cam['global_a2_cv2_hc2_rs100']

dsl_low['hc'] = ds_clm['global_a2_cv2_hc0.5_rs100']
dsl_med['hc'] = ds_clm['global_a2_cv2_hc1_rs100']
dsl_high['hc'] = ds_clm['global_a2_cv2_hc2_rs100']

# evaporative resistance:
ds_low['rs'] = ds_cam['global_a2_cv2_hc1_rs30']
ds_med['rs'] = ds_cam['global_a2_cv2_hc1_rs100']
ds_high['rs'] = ds_cam['global_a2_cv2_hc1_rs200']

dsl_low['rs'] = ds_clm['global_a2_cv2_hc1_rs30']
dsl_med['rs'] = ds_clm['global_a2_cv2_hc1_rs100']
dsl_high['rs'] = ds_clm['global_a2_cv2_hc1_rs200']


# atmospheric variable to evaluate:
atm_var= 'TREFHT'
units[atm_var] = ds1[atm_var].units
   
sfc_props = ['alb','hc','rs']
sfc_prop_ranges = np.array([ [0.1, 0.2, 0.3],
                  [0.5, 1., 2.],
                  [30., 100., 200.]])
print(np.shape(sfc_prop_ranges))

print(sfc_prop_ranges)

i=0

for prop in sfc_props:
    pert[prop] = sfc_prop_ranges[i,:]
    ds1 = ds_low[prop]
    ds2 = ds_med[prop]
    ds3 = ds_high[prop]
    
    # annual mean response
    atm_resp[prop] = [ds1.mean('time')[atm_var].values[:,:],
            ds2.mean('time')[atm_var].values[:,:],
            ds3.mean('time')[atm_var].values[:,:]]
    
    # seasonal responses:
    # (first, make 12 month response, then average over djf, jja, etc)
    #print(np.shape(ds1[atm_var].values))
    resp_mths = np.array([ds1[atm_var].values[:,:,:],
                ds2[atm_var].values[:,:,:],
                ds3[atm_var].values[:,:,:]])
    print(np.shape(resp_mths))
    #print(type(resp_mths))
    #print(resp_mths[:,[11,0,1]])
    atm_resp_djf[prop] = np.mean(resp_mths[:,[11,0,1],:,:],1).squeeze()
    atm_resp_mam[prop] = np.mean(resp_mths[:,[2,3,4],:,:],1).squeeze()
    atm_resp_jja[prop] = np.mean(resp_mths[:,[5,6,7],:,:],1).squeeze()
    atm_resp_son[prop] = np.mean(resp_mths[:,[8,9,10],:,:],1).squeeze()
    print(np.shape(atm_resp_djf[prop]))
    i=i+1

print(prop)
print(pert)
print(atm_resp)
print(pert['alb'])



#%%

# sklearn linear_model , pearson r

# Linear regression

# Annual and seasonal... ought to be able to nest, non? 
slope = {}
intercept = {}
r_value = {}
p_value = {}
std_err = {}

sensitivity = {}

seasons = ['ANN','DJF','MAM','JJA','SON']

for sea in seasons:
    slope[sea] = {}
    intercept[sea] = {}
    r_value[sea] = {}
    p_value[sea] = {}
    std_err[sea] = {}
    sensitivity[sea] = {}



for prop in sfc_props:
    
    for sea in seasons:
    
        #-----------------------------
        #  Do the regression
        #-----------------------------
        
        # Get the perturbation values, make an np.array (default is list)
        xvals = np.array(pert[prop])
        k = np.size(xvals)
        print(k)
        print(np.max(xvals))
        
        # grab atmospheric response data for current property, make an np.array
        raw_data = np.array(atm_resp[prop])
        # flatten response data into a single long vector (Thanks to Andre for showing me how to do this whole section)
        raw_data_v = raw_data.reshape(k, -1)
        #print(np.shape(raw_data_v))
        #print(np.shape(xvals[:,None]))
        
        
        # create an "empty" model
        model = linear_model.LinearRegression()
        
        # Fit the model to tmp_data
        model.fit(xvals[:, None], raw_data_v)
        
        #  grab the linear fit vector
        slope_vector = model.coef_
        intercept_vector = model.intercept_
        
        # put back into lat/lon (hard coded to be 2.5 degrees right now...)
        slope[sea][prop] = slope_vector.reshape(96,144)
        intercept[sea][prop] = intercept_vector.reshape(96,144)
        
        #-----------------------------
        #   Calculate the r^2 value
        #-----------------------------
    
        # grab the linear fit using the slope and intercept, so we can calculate the correlation coefficient
        fit_data_v = np.transpose(slope_vector*xvals)
        #print(np.shape(fit_data_v))
        #print(np.shape(raw_data_v))
     
        # Calculate r value
        #r_v, p_v = stats.pearsonr(raw_data_v, fit_data_v)
        #get_ipython().magic('%timeit')
        #r_v = np.corrcoef(x=raw_data_v,y=fit_data_v,rowvar=0)
        
        # Going to do this by hand until I figure out how to do it on a matrix...
        #print(np.size(raw_data_v,1))
        x_bar = np.mean(xvals)
        std_x = stats.tstd(xvals)
        #print(x_bar)
        #print(std_x)
        
        #print((np.shape(raw_data_v[1,:])))
        #print(np.shape(raw_data_v))
        #print(np.shape(fit_data_v))
        r_v = np.zeros(np.shape(raw_data_v[0,:]))
        p_v = np.zeros(np.shape(raw_data_v[0,:]))
        #print(np.shape(r_v))
        
        for j in range(np.size(raw_data_v,1)):
           
            # compare to using the pearson-r function:
            r, p = stats.pearsonr(raw_data_v[:,j],fit_data_v[:,j])
            r_v[j] = r
            p_v[j] = p
    
      
        #print(np.shape(r_v.reshape(96,144)))
        
        r_value[sea][prop] = r_v.reshape(96,144)
        p_value[sea][prop] = p_v.reshape(96,144)



#%% 
"""Loop over seasons and make a pcolor plot of the experiment instance (1,2, or 3)
   with the maximum surface temperature. IE albedo should always be 1, except
   over that cloud deck. Really interested in doing this to see pattern for hc.
   
   Repeat for min.
"""  

myvar = 'TREFHT'
# Loop over properties:
for prop in sfc_props: 
    
    # set appropriate colour limits
    if prop =='alb':
        clim_dlnd = [-0.01, 0.01]
        clim_datm = [-25,25]
    elif prop =='hc':
        clim_dlnd = [-2.,2.]
        clim_datm = [-0.5,0.5]
    elif prop=='rs' :
        clim_dlnd = [-30.,30.]
        clim_datm = [-.025,.025]
    
    # Loop over seasons:
    for sea in seasons:
     #   #%% ALBEDO - Unmasked
        
    
        #prop = 'alb'
        #myvar = 'TREFHT'
        ds0 = ds_cam['global_a2_cv2_hc1_rs100']
        mask_name = 'nomask'
        
        #sea = 'ANN'
        
        mapdata_slope = slope[sea][prop]
        mapdata_inv = slope[sea][prop]**(-1)
        mapdata_r2 = r_value[sea][prop]**2
        
        
        ttl_main = prop #'Albedo'
        filename = 'sens_slopes_'+prop+'_'+mask_name+'_'+sea
        
        
        cmap_abs = plt.cm.viridis
        cmap_diff = plt.cm.RdBu_r
        
        fig, axes = plt.subplots(1, 3, figsize=(18,6))
        
        ax0 = axes.flatten()[0]
        plt.sca(ax0)
        ttl = '$\delta$ '+prop+' per 0.1K change in T2m'
        units = 'unitless'
        #clim_diff = [-.01,.01]
        mapdata = mapdata_inv*0.1
        mml_map(LN,LT,mapdata,ds0,myvar,'moll',title=ttl,clim=clim_dlnd,colmap=cm_dlnd, cb_ttl='units: '+units )   #plt.cm.BuPu_r
        ax=ax0
        for item in ([ax.title, ax.xaxis.label, ax.yaxis.label] + ax.get_xticklabels() + ax.get_yticklabels()):
            item.set_fontsize(12)
        
        ax1 = axes.flatten()[1]
        plt.sca(ax1)
        ttl = '$\delta$ T2m per unit change in '+prop
        units = 'K'
       # clim_diff = [-25,25]
        #clim_abs = clim_diff
        mapdata = mapdata_slope
        mml_map(LN,LT,mapdata,ds0,myvar,'moll',title=ttl,clim=clim_datm,colmap=cm_datm, cb_ttl='units: '+units )   #plt.cm.BuPu_r
        ax=ax1
        for item in ([ax.title, ax.xaxis.label, ax.yaxis.label] + ax.get_xticklabels() + ax.get_yticklabels()):
            item.set_fontsize(12)
        
        ax2 = axes.flatten()[2]
        plt.sca(ax2)
        ttl = 'r^2'
        units = 'r^2'
        clim_abs = [0.5,1]
        mapdata = mapdata_r2
        mml_map(LN,LT,mapdata,ds0,myvar,'moll',title=ttl,clim=clim_abs,colmap=cmap_abs, cb_ttl='units: '+units )   #plt.cm.BuPu_r
        ax=ax2
        for item in ([ax.title, ax.xaxis.label, ax.yaxis.label] + ax.get_xticklabels() + ax.get_yticklabels()):
            item.set_fontsize(12)
        
        fig.subplots_adjust(top=1.15)
        fig.suptitle(ttl_main, fontsize=20)   
        
        # Annotate with season, variable, date
        ax0.text(0.,-0.35,time.strftime("%x")+'\n'+sea +', '+prop ,fontsize='10',
                 ha = 'left',va = 'center',
                 transform = ax0.transAxes)
        
        fig_name = figpath+'/sensitivity/'+filename+'.eps'
        fig.savefig(fig_name,dpi=1200,transparent=True,facecolor='w',
                    edgecolor='w',orientation='portrait',bbox_inches='tight', 
                    pad_inches=0.1,frameon=None)
        
        fig_name = figpath+'/sensitivity/'+filename+'.png'
        fig.savefig(fig_name,dpi=1200,transparent=True,facecolor='w',
                    edgecolor='w',orientation='portrait',bbox_inches='tight', 
                    pad_inches=0.1,frameon=None)
        
        plt.close()
        
        
    #    #%% ALBEDO - Land Mask
    
    
        #prop = 'alb'
        #myvar = 'TREFHT'
        ds0 = ds_cam['global_a2_cv2_hc1_rs100']
        mask_name = 'lndmask'
        #sea = 'ANN'
        
        mapdata_slope = slope[sea][prop]
        mapdata_inv = slope[sea][prop]**(-1)
        mapdata_r2 = r_value[sea][prop]**2
        
        
        ttl_main = prop #'Albedo'
        filename = 'sens_slopes_'+prop+'_'+mask_name+'_'+sea
        
        
        cmap_abs = plt.cm.viridis
        cmap_diff = plt.cm.RdBu_r
        
        fig, axes = plt.subplots(1, 3, figsize=(18,6))
        
        ax0 = axes.flatten()[0]
        plt.sca(ax0)
        ttl = '$\delta$ '+prop+' per 0.1K change in T2m'
        units = 'unitless'
        #clim_diff = [-.01,.01]
        mapdata = mapdata_inv*0.1*bareground_mask
        mapdata = np.ma.masked_where(np.isnan(mapdata),mapdata)
        mml_map(LN,LT,mapdata,ds0,myvar,'moll',title=ttl,clim=clim_dlnd,colmap=cm_dlnd, cb_ttl='units: '+units )   #plt.cm.BuPu_r
        ax=ax0
        for item in ([ax.title, ax.xaxis.label, ax.yaxis.label] + ax.get_xticklabels() + ax.get_yticklabels()):
            item.set_fontsize(12)
        
        ax1 = axes.flatten()[1]
        plt.sca(ax1)
        ttl = '$\delta$ T2m per unit change in '+prop
        units = 'K'
        #clim_diff = [-25,25]
        #clim_abs = clim_diff
        mapdata = mapdata_slope*bareground_mask
        mapdata = np.ma.masked_where(np.isnan(mapdata),mapdata)
        mml_map(LN,LT,mapdata,ds0,myvar,'moll',title=ttl,clim=clim_datm,colmap=cm_datm, cb_ttl='units: '+units )   #plt.cm.BuPu_r
        ax=ax1
        for item in ([ax.title, ax.xaxis.label, ax.yaxis.label] + ax.get_xticklabels() + ax.get_yticklabels()):
            item.set_fontsize(12)
        
        ax2 = axes.flatten()[2]
        plt.sca(ax2)
        ttl = 'r^2'
        units = 'r^2'
        clim_abs = [0.5,1]
        mapdata = mapdata_r2*bareground_mask
        mapdata = np.ma.masked_where(np.isnan(mapdata),mapdata)
        mml_map(LN,LT,mapdata,ds0,myvar,'moll',title=ttl,clim=clim_abs,colmap=cmap_abs, cb_ttl='units: '+units )   #plt.cm.BuPu_r
        ax=ax2
        for item in ([ax.title, ax.xaxis.label, ax.yaxis.label] + ax.get_xticklabels() + ax.get_yticklabels()):
            item.set_fontsize(12)
        
        fig.subplots_adjust(top=1.15)
        fig.suptitle(ttl_main, fontsize=20)    
        
        # Annotate with season, variable, date
        ax0.text(0.,-0.35,time.strftime("%x")+'\n'+sea +', '+prop ,fontsize='10',
                 ha = 'left',va = 'center',
                 transform = ax0.transAxes)
        
        
        fig_name = figpath+'/sensitivity/'+filename+'.eps'
        fig.savefig(fig_name,dpi=1200,transparent=True,facecolor='w',
                    edgecolor='w',orientation='portrait',bbox_inches='tight', 
                    pad_inches=0.1,frameon=None)
        
        fig_name = figpath+'/sensitivity/'+filename+'.png'
        fig.savefig(fig_name,dpi=1200,transparent=True,facecolor='w',
                    edgecolor='w',orientation='portrait',bbox_inches='tight', 
                    pad_inches=0.1,frameon=None)
        
        plt.close()
        
        
    #    #%% ALBEDO - ocn mask
        
        
       # prop = 'alb'
        #myvar = 'TREFHT'
        ds0 = ds_cam['global_a2_cv2_hc1_rs100']
        mask_name = 'ocnmask'
        #sea = 'ANN'
        
        mapdata_slope = slope[sea][prop]
        mapdata_inv = slope[sea][prop]**(-1)
        mapdata_r2 = r_value[sea][prop]**2
        
        
        ttl_main = prop #'Albedo'
        filename = 'sens_slopes_'+prop+'_'+mask_name+'_'+sea
        
        
        cmap_abs = plt.cm.viridis
        cmap_diff = plt.cm.RdBu_r
        
        fig, axes = plt.subplots(1, 3, figsize=(18,6))
        
        ax0 = axes.flatten()[0]
        plt.sca(ax0)
        ttl = '$\delta$ '+prop+' per 0.1K change in T2m'
        units = 'unitless'
        #clim_diff = [-.01,.01]
        mapdata = mapdata_inv*0.1*ocn_glc_mask
        mapdata = np.ma.masked_where(np.isnan(mapdata),mapdata)
        mml_map(LN,LT,mapdata,ds0,myvar,'moll',title=ttl,clim=clim_dlnd,colmap=cm_dlnd, cb_ttl='units: '+units )   #plt.cm.BuPu_r
        ax=ax0
        for item in ([ax.title, ax.xaxis.label, ax.yaxis.label] + ax.get_xticklabels() + ax.get_yticklabels()):
            item.set_fontsize(12)
        
        ax1 = axes.flatten()[1]
        plt.sca(ax1)
        ttl = '$\delta$ T2m per unit change in '+prop
        units = 'K'
        #clim_diff = [-25,25]
        #clim_abs = clim_diff
        mapdata = mapdata_slope*ocn_glc_mask
        mapdata = np.ma.masked_where(np.isnan(mapdata),mapdata)
        mml_map(LN,LT,mapdata,ds0,myvar,'moll',title=ttl,clim=clim_datm,colmap=cm_datm, cb_ttl='units: '+units )   #plt.cm.BuPu_r
        ax=ax1
        for item in ([ax.title, ax.xaxis.label, ax.yaxis.label] + ax.get_xticklabels() + ax.get_yticklabels()):
            item.set_fontsize(12)
        
        ax2 = axes.flatten()[2]
        plt.sca(ax2)
        ttl = 'r^2'
        units = 'r^2'
        clim_abs = [0.5,1]
        mapdata = mapdata_r2*ocn_glc_mask
        mapdata = np.ma.masked_where(np.isnan(mapdata),mapdata)
        mml_map(LN,LT,mapdata,ds0,myvar,'moll',title=ttl,clim=clim_abs,colmap=cmap_abs, cb_ttl='units: '+units )   #plt.cm.BuPu_r
        ax=ax2
        for item in ([ax.title, ax.xaxis.label, ax.yaxis.label] + ax.get_xticklabels() + ax.get_yticklabels()):
            item.set_fontsize(12)
        
        fig.subplots_adjust(top=1.15)
        fig.suptitle(ttl_main, fontsize=20)    
        
        # Annotate with season, variable, date
        ax0.text(0.,-0.35,time.strftime("%x")+'\n'+sea +', '+prop ,fontsize='10',
                 ha = 'left',va = 'center',
                 transform = ax0.transAxes)
        
        fig_name = figpath+'/sensitivity/'+filename+'.eps'
        fig.savefig(fig_name,dpi=1200,transparent=True,facecolor='w',
                    edgecolor='w',orientation='portrait',bbox_inches='tight', 
                    pad_inches=0.1,frameon=None)
        
        fig_name = figpath+'/sensitivity/'+filename+'.png'
        fig.savefig(fig_name,dpi=1200,transparent=True,facecolor='w',
                    edgecolor='w',orientation='portrait',bbox_inches='tight', 
                    pad_inches=0.1,frameon=None)
        
    
        
        plt.close()
        
        
    # end seasonal loop.
    
# end property loop
    

#%% 



#%%



#%%



#%%




